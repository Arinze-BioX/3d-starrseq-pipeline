#!/datacommons/ydiaolab/arinze/apps/miniconda_20220118/envs/snakemake_3dstarrseq/bin/python

import json

configfile: "config_file.yaml"

smooth_window  = 150
shiftsize      = -75
genome_version = 'hs'
pval_thresh    = 0.05

FILES      = json.load(open(config['SAMPLES_JSON']))
SAMPLES    = sorted(FILES.keys())
BWA_INDEX  = config['BWA_INDEX']
chromsizes = config['chromsizes']
genome     = config['genome']
frag_path  = config['frag_path']
cool_bin   = config['cool_bin']
res        = config['res']
nla3_bed   = config['nla3_bed']
moustache_path = config['moustache_path']
BIN500      = config['BIN500']
bin_type    = ["nla3", "500nt"]
database    = config['database']
db_uname    = config['db_username']
db_password = config['db_password']
inner_db    = config['inner_db']

TARGETS = []
peaks  = expand("macs2_peak/{sample}_{genome}_peaks.narrowPeak" , sample = SAMPLES, genome = genome)
final_cool1 = expand("cool_3dstarr/final_{sample}_{genome}_binpair_rawCounts_500nt.cool", sample = SAMPLES, genome = genome)
final_cool2 = expand("cool_3dstarr/final_{sample}_{genome}_unweighted_500nt_DepthNorm.cool", sample = SAMPLES, genome = genome)
nla3_pairs = expand("binned_frags-{genome}/{sample}_R1_nla3_LengthCut_DepthNorm_bins.bed", sample = SAMPLES, genome = genome)
hic_loops = expand("coolers-{genome}/{sample}.{cool_bin}_loops.tsv", sample = SAMPLES, genome = genome, cool_bin = cool_bin)
final_cool3 = expand("cool_3dstarr/final_{sample}_{genome}_weighted_500nt_LengthDepthNorm.cool", sample = SAMPLES, genome = genome)
TARGETS.extend(peaks)
TARGETS.extend(final_cool1)
TARGETS.extend(final_cool2)
TARGETS.extend(final_cool3)
TARGETS.extend(nla3_pairs)
TARGETS.extend(hic_loops)

localrules: all, combine_3dstarr_bin_pairs

rule all:
    input: TARGETS

rule fastq_select_valid:
    input:
        r1 = lambda wildcards: FILES[wildcards.sample]['R1'],
        r2 = lambda wildcards: FILES[wildcards.sample]['R2']
    output: 
        "00_valid_fastq/{sample}_valid_r1.fq.gz", 
        "00_valid_fastq/{sample}_valid_r2.fq.gz"
    threads: 12
    message: "select reads with correct orientation"
    log:
         "00_log/{sample}_stdOut.removeadapt","00_log/{sample}_error.removeadapt"
    shell: """
    cutadapt -Z -j {threads} -e 0.16 --action none --discard-untrimmed -g ^ACANNNNTGTGCGAACTCAGACC -o {output[0]} -p {output[1]} {input[0]} {input[1]} 1> {log[0]} 2> {log[1]}
"""
    
  
rule fastq_UMI_extraction:
    input:
        "00_valid_fastq/{sample}_valid_r1.fq.gz", 
        "00_valid_fastq/{sample}_valid_r2.fq.gz"
    output: 
        "00_UMI_named_fq/{sample}_UMIextracted_r1.fq.gz", 
        "00_UMI_named_fq/{sample}_UMIextracted_r2.fq.gz"
    threads: 12
    message: "Remove non-biological sequences and add umi to read name for already demultiplexed reads"
    log:
         "00_log/{sample}.extractUMI", "00_log/{sample}.extractUMI_error"
    shell: """
    umi_tools extract --extract-method=regex --ignore-read-pair-suffixes --bc-pattern='(?P<discard_1>.{{23}})' \
--bc-pattern2='.+(?P<discard_1>.{{10}})(?P<umi_2>.{{8}})(?P<discard_2>.{{12}})' \
--log={log[0]} -I {input[0]} -S {output[0]} \
--read2-in={input[1]} --read2-out={output[1]} 2> {log[1]}
"""

rule bwa_mem_mapping:
    input:
        r1 = "00_UMI_named_fq/{sample}_UMIextracted_r1.fq.gz",
        r2 = "00_UMI_named_fq/{sample}_UMIextracted_r2.fq.gz"
    output: "01_bam/{sample}.bam"
    threads: 24
    resources:
            mem="50G"
    message: "bwa {input}: {threads} threads"
    log:
        "00_log/{sample}_err.bwa"
    shell: """
    bwa mem  -SP -t {threads} {BWA_INDEX} {input} | samtools view -bS - > {output}  2> {log}
    """

rule samtools_sort_bam:
    input:  "01_bam/{sample}.bam"
    output: "02_bam/{sample}.bam"
    threads: 1
    message: "samtools index bam files for deduplication {input}: {threads} threads"
    log:
        "00_log/{sample}_sort_err.samtools"
    shell: """samtools sort {input} -o {output} 2> {log}"""

rule samtools_index:
    input:  "02_bam/{sample}.bam"
    output: "02_bam/{sample}.bam.bai"
    threads: 1
    message: "bam indexing"
    log:
        "00_log/{sample}_index.samtools"
    shell: """samtools index {input}"""


rule UMItools_deduplication:
    input:  "02_bam/{sample}.bam","02_bam/{sample}.bam.bai"
    output: "umicollapse_dedup/{sample}_UMIcollapse_dedup.bam"
    threads: 24
    resources:
        mem="50G"
    message: "umitools deduplication based on UMI {input}: {threads} threads"
    log:
        "00_log/{sample}_dedupLog.umitools", "00_log/{sample}_name_sort.samtools"
    shell: """
umi_tools dedup --stdin={input[0]} --log={log[0]} --unpaired-reads=discard --paired | samtools sort -n -o {output}  2> {log[1]}
"""


rule parse_pairs_from_BAM_files: ## no flip to makesure the R1 R2 position for the peak calling. After standard columns, also outputs restriction fragment index (for pos1), res. frag. start for pos1, res. end for pos 1, then same columns for pos 2.
    input:  "umicollapse_dedup/{sample}_UMIcollapse_dedup.bam"
    output: "pairs-{genome}/{sample}.raw.pairsam.gz", "pairs-{genome}/{sample}.raw.pairsam.stat"
    message: "parse bam {input} "
    threads: 2
    log:
        "00_log/{sample}_{genome}_parsePairs.pairtools"
    shell: """
pairtools parse -c {chromsizes}  --assembly {genome} --min-mapq 10 --max-molecule-size 2000 --max-inter-align-gap 20 --walks-policy mask  --no-flip --drop-seq --drop-sam  --output-stats {output[1]} -o {output[0]}  {input[0]} 2> {log}
"""

rule select_valid_pairs:
    input:  "pairs-{genome}/{sample}.raw.pairsam.gz"
    output: "pairs-{genome}/{sample}.selected.pairs.gz"
    message: "flip and sort {input} "
    threads: 8
    log:
        "00_log/{sample}_{genome}_selectValidPairs.pairtools"
    shell: """
pairtools flip -c {chromsizes} {input[0]} | pairtools select '(pair_type=="UU") or (pair_type=="UR") or (pair_type=="RU")' | pairtools sort  --nproc 8  --memory 15G  -o {output} 2> {log}
"""

rule get_3dstarr_counts:
    input:  "pairs-{genome}/{sample}.selected.pairs.gz"
    output: "final_bed-{genome}/{sample}_unique_pairs_with_counts.bedpe"
    threads: 4
    resources:
        mem="120G"
    message: "count fragments per position"
    log:
        "00_log/{sample}_{genome}_count_finalBed.bedtools_groupby"
    shell: """
zcat {input} | awk -F '[t]' ' /^[^#]/ {{ print $0 }}' |\
bedtools groupby -g 2-7 -c 5 -o count |\
awk '{{ print $1"\\t"$2"\\t"$5"\\t"$7"\\t"$1"_"$2"_"$3"_"$4"\\n"$3"\\t"$4"\\t"$6"\\t"$7"\\t"$1"_"$2"_"$3"_"$4 }}' |\
awk '{{ if ($3 == "+") {{ print $1"\\t"$2"\\t"($2+1)"\\t"$5"\\t"$4"\\t"$3}} else if ($3 == "-") {{ print $1"\\t"($2-1)"\\t"$2"\\t"$5"\\t"$4"\\t"$3}}}}' |\
bedtools intersect -a stdin -b /datacommons/ydiaolab/arinze/ThreeD_STARRseq/new_genome_files/hg38_nla3.bed -wa -wb |\
awk '{{ if ($6 == "+") {{ print $1"\\t"$2"\\t"$9"\\t"$4"\\t"$5"\\t"$6 }} else if ($6 == "-") {{ print $1"\\t"$8"\\t"$3"\\t"$4"\\t"$5"\\t"$6 }} }}' |\
paste -sd '\\t\\n' | awk '{{ if($4 == $10) {{print $1"\\t"$2"\\t"$3"\\t"$7"\\t"$8"\\t"$9"\\t"$1"_"$2"_"$3"-"$7"_"$8"_"$9"\\t"$5"\\t"$6"\\t"$12}} }}' > {output} 2> {log}
"""


rule hic_remove_duplicate_pairs:
    input:  "pairs-{genome}/{sample}.selected.pairs.gz"
    output: "filtered-{genome}/{sample}.dedup.pairs.gz" ,"filtered-{genome}/{sample}.dedup.pairs.stat"
    message: "dedup to filted {input} "
    threads: 5
    log:
        "00_log/{sample}_{genome}_removeDuplicateFragments.pairtools"
    shell: """
pairtools dedup --max-mismatch 1 --method max -o {output[0]} {input} --output-stats  {output[1]} 2> {log}
"""

rule hic_remove_same_fragment_pairs:
    input:  "filtered-{genome}/{sample}.dedup.pairs.gz"
    output: valid = "filtered-{genome}/{sample}.valid.pairs.gz", same_f = "filtered-{genome}/{sample}.samefrag.pairs.gz"
    message: "selected pairsam {input} "
    threads: 5
    log:
        "00_log/{sample}_{genome}_removeSameFragmentPairs.pairtools"
    shell: """
pairtools restrict -f {frag_path} {input} | pairtools select '(COLS[-6]==COLS[-3]) and (chrom1==chrom2)' --output-rest {output[valid]} -o {output[same_f]} 2> {log}
"""

rule hic_make_index:
    input:  "filtered-{genome}/{sample}.valid.pairs.gz"
    output: "filtered-{genome}/{sample}.valid.pairs.gz.px2"
    message: "dedup to filted {input} "
    threads: 5
    shell: """
pairix -p pairs  {input}
"""
        
rule extract_R2_ATAC_reads:
    input:  "pairs-{genome}/{sample}.raw.pairsam.gz"
    output: "peaks-{genome}/{sample}.longRange_Trans.pairs.gz", "peaks-{genome}/{sample}.short.pairs.gz"
    message: "flip to filted {input} "
    threads: 8
    log:
        "00_log/{sample}_{genome}_removeDuplicateFragments.pairtools"
    shell: """
pairtools select '(pair_type=="UU") or (pair_type=="UR") or (pair_type=="RU")' {input} | pairtools select '(chrom1==chrom2) and (abs(pos1 - pos2) < 1e4)'  -o {output[1]}  --output-rest {output[0]} 2> {log}
"""

rule ATAC_reads_Tn5_shifting_duplicate_remove:  
    input:  "peaks-{genome}/{sample}.longRange_Trans.pairs.gz"
    output: "peaks-{genome}/{sample}.R2.ATAC.bed.gz"
    threads: 1
    shell: """
zcat {input} | awk ' BEGIN {{OFS="\\t"}} ;  /^[^#]/ {{ {{ if ($7 == "+") {{$5 = $5 + 4}} else if ($7 == "-") {{$5 = $5 - 5}}  print $4, $5, $5+1, "*", "*", $7}} }} ' | sort -k1,1 -k2,2n | uniq  | gzip -nc > {output}
"""

rule ATAC_macs2_peaks:
    input:  "peaks-{genome}/{sample}.R2.ATAC.bed.gz"
    output: "macs2_peak/{sample}_{genome}_peaks.narrowPeak"
    threads:1
    params: name = "{sample}_{genome}"
    shell: """
macs2 callpeak -t {input} -f BED -n {params.name}  -g {genome_version} --qval {pval_thresh} --shift {shiftsize} --extsize {smooth_window} --nomodel -B --SPMR --keep-dup all --call-summits --outdir macs2_peak 
"""

rule hic_get_contact_frequency_cooler:
    input:  "filtered-{genome}/{sample}.valid.pairs.gz", "filtered-{genome}/{sample}.valid.pairs.gz.px2"
    output: "coolers-{genome}/{sample}.{cool_bin}_balanced.cool"
    message: "cooler {input} "
    params: res = {cool_bin}
    log: "00_log/{sample}_{genome}_{cool_bin}_cload.cooler", "00_log/{sample}_{genome}_{cool_bin}_balance.cooler"
    threads: 10
    shell: """
cooler cload pairix --assembly hg38 --nproc {threads} --max-split 2 {chromsizes}:{params.res} {input[0]} {output} 2> {log[0]}
cooler balance {output} 2> {log[1]}
"""

rule hic_call_interaction_loops:
    input: "coolers-{genome}/{sample}.{cool_bin}_balanced.cool"
    output: "coolers-{genome}/{sample}.{cool_bin}_loops.tsv"
    message: "Calling interaction loops"
    params: res = {res}, moustache_path = {moustache_path}
    log: "00_log/{sample}_{genome}_{cool_bin}_callLoops.moustache"
    shell: """
python3 {params.moustache_path}/mustache.py -f {input} -r {params.res} -pt 0.05 -o {output} 2> {log}
"""

rule depth_normalize_3dstarr_counts:
    input: "final_bed-{genome}/{sample}_unique_pairs_with_counts.bedpe"
    output: "final_bed-{genome}/{sample}_unique_pairs_with_LengthCut_DepthNorm_counts.bedpe"
    message: "Sequence depth normalization of 3dstarr counts"
    log: "00_log/{sample}_{genome}_normalize.awk"
    shell: """
total_counts_{wildcards.sample}=( $(awk '{{total_counts+=$8}}; END{{print total_counts}}' {input}) )
awk -v total="$total_counts_{wildcards.sample}" 'BEGIN {{OFS="\\t"}}
{{$9 = ($8/(total/1000000))}}
{{ if (! ((($3 - $2) < 5 || ($3 - $2) > 5000) && (($6 - $5) < 5 || ($6 - $5) > 5000))) print $0 }}' {input} > {output}
"""


rule map_3dstarr_frags_to_500nt_bin:
    input: "final_bed-{genome}/{sample}_unique_pairs_with_LengthCut_DepthNorm_counts.bedpe"
    output: "binned_frags-{genome}/{sample}_R1_500nt_LengthCut_DepthNorm_bins.bed", 
            "binned_frags-{genome}/{sample}_R2_500nt_LengthCut_DepthNorm_bins.bed"
    priority: 99
    message: "Map 3D-STARRseq counts to 500nt genome bins"
    params: BIN500 = {BIN500}
    log: "00_log/{sample}_{genome}_mapBins_500nt.bedtools"
    shell: """
awk '{{print $1"\\t"$2"\\t"$3"\\t"$7"\\t"$8"\\t"$9}}' {input} | bedtools intersect -a stdin -b {params.BIN500} -wo > {output[0]} 2> {log}
awk '{{print $4"\\t"$5"\\t"$6"\\t"$7"\\t"$8"\\t"$9}}' {input} | bedtools intersect -a stdin -b {params.BIN500} -wo > {output[1]} 2> {log}
"""


rule map_3dstarr_frags_to_Nla3_frags:
    input: "final_bed-{genome}/{sample}_unique_pairs_with_LengthCut_DepthNorm_counts.bedpe"
    output: "binned_frags-{genome}/{sample}_R1_nla3_LengthCut_DepthNorm_bins.bed", 
            "binned_frags-{genome}/{sample}_R2_nla3_LengthCut_DepthNorm_bins.bed"
    message: "Map 3D-STARRseq counts to Nla3_frags"
    params: nla3_bed = {nla3_bed}
    log: "00_log/{sample}_{genome}_mapBins_nla3.bedtools"
    shell: """
awk '{{print $1"\\t"$2"\\t"$3"\\t"$7"\\t"$8"\\t"$9}}' {input} | bedtools intersect -a stdin -b {params.nla3_bed} -wo > {output[0]} 2> {log}
awk '{{print $4"\\t"$5"\\t"$6"\\t"$7"\\t"$8"\\t"$9}}' {input} | bedtools intersect -a stdin -b {params.nla3_bed} -wo > {output[1]} 2> {log}
"""


rule combine_3dstarr_bin_pairs:
    input:  "binned_frags-{genome}/{sample}_R1_500nt_LengthCut_DepthNorm_bins.bed", 
            "binned_frags-{genome}/{sample}_R2_500nt_LengthCut_DepthNorm_bins.bed"
    output: "binned_frags-{genome}/{sample}_500nt_LengthCut_DepthNorm_bin_pairs.bedpe"
    threads: 100
    params: db = {database}, db_password={db_password}, db_user = {db_uname}, inner_db = {inner_db}
    message: "Combine bin pairs after mapping to bins"
    log: "00_log/{sample}_{genome}_500nt_CombineBins.python"
    resources:
        mem="150G",
        cpu=1
    shell: """
touch started_running_server_code.txt
initdb -D {params.db} || echo "database already initialized"
sleep 30s
pg_ctl -D {params.db} -l logfile start || sleep 30s
pg_ctl status -D {params.db} || pg_ctl -D {params.db} -l logfile start || echo "another sample might have started the specified server"
sleep 30s
createuser --encrypted {params.db_user} || echo "user already created"
sleep 30s
createdb --owner={params.db_user} {params.inner_db} || echo "Inner database already created"
sleep 30s
psql -U {params.db_user} {params.inner_db} -c "ALTER ROLE {params.db_user} WITH PASSWORD '{params.db_password}';"
touch server_ready_for_{wildcards.sample}.txt
./combine_bin_pairs_postgre.py --frag1 {input[0]} --frag2 {input[1]} --output {output[0]} --database {params.inner_db} --db_username {params.db_user} --db_password {params.db_password} 2> {log} || echo "combine_bin_python code skipped"
pg_ctl -D {params.db} stop || echo "server already stopped"
"""


def ensure_combined_samples(wildcards):
    return expand(
        "binned_frags-{genome}/{sample}_500nt_LengthCut_DepthNorm_bin_pairs.bedpe",
        sample = SAMPLES, genome = genome)

rule stop_postgre_server:
    input: ensure_combined_samples
    output: touch("closed_server.txt")
    params: db = {database}
    shell: """
sleep 5m
pg_ctl -D {params.db} stop || echo "server already stopped"
"""

rule add_unweighted_3dstarr_raw_counts_500nt:
    input: "binned_frags-{genome}/{sample}_500nt_LengthCut_DepthNorm_bin_pairs.bedpe", "closed_server.txt"
    output: "cool_3dstarr/final_{sample}_{genome}_binpair_rawCounts_500nt.bedpe"
    message: "Get raw fragment counts supporting each bin pair"
    log: "00_log/{sample}_{genome}_binpair_rawCounts.bedtools"
    shell: """
awk '{{ {{x=($5+$15)}}
{{print $7"\\t"$8"\\t"$9"\\t"$17"\\t"$18"\\t"$19"\\t"x}} }}' {input[0]} | sort -k1,1 -k2,2 -k3,3 -k4,4 -k5,5 -k6,6 | bedtools groupby -g 1,2,3,4,5,6 -c 7 -o sum > {output} 2> {log}

"""


rule add_weighted_lengthNorm_3dstarr_bin_scores_500nt:
    input: "binned_frags-{genome}/{sample}_500nt_LengthCut_DepthNorm_bin_pairs.bedpe", "closed_server.txt"
    output: "cool_3dstarr/final_{sample}_{genome}_weighted_500nt_LengthDepthNorm.bedpe"
    message: "Make final 3dstarr pairs with score"
    log: "00_log/{sample}_{genome}_weighted_500nt_3dstarrScore.bedtools"
    shell: """
awk '{{ {{a=500/($3-$2)}}
{{b=(500/($13-$12))}}
{{x=((($10/500)*a*$6) + (($20/500)*b*$16))}}
{{print $7"\\t"$8"\\t"$9"\\t"$17"\\t"$18"\\t"$19"\\t"x}} }}' {input[0]} | sort -k1,1 -k2,2 -k3,3 -k4,4 -k5,5 -k6,6 | bedtools groupby -g 1,2,3,4,5,6 -c 7 -o sum > {output} 2> {log}
"""

rule add_unweighted_3dstarr_bin_scores_500nt:
    input: "binned_frags-{genome}/{sample}_500nt_LengthCut_DepthNorm_bin_pairs.bedpe", "closed_server.txt"
    output: "cool_3dstarr/final_{sample}_{genome}_unweighted_500nt_DepthNorm.bedpe"
    message: "Make unweighted 3dstarr pairs with score"
    log: "00_log/{sample}_{genome}_unweighted_500nt_3dstarrScore.bedtools"
    shell: """
awk '{{{{x= ($6 + $16) }}
{{print $7"\\t"$8"\\t"$9"\\t"$17"\\t"$18"\\t"$19"\\t"x}} }}' {input[0]} | sort -k1,1 -k2,2 -k3,3 -k4,4 -k5,5 -k6,6 | bedtools groupby -g 1,2,3,4,5,6 -c 7 -o sum > {output} 2> {log}
"""

rule make_raw_3dstarr_cool:
    input: "cool_3dstarr/final_{sample}_{genome}_binpair_rawCounts_500nt.bedpe"
    output: "cool_3dstarr/final_{sample}_{genome}_binpair_rawCounts_500nt.cool"
    message: "Make final 3dstarr cool file for raw counts"
    log: "00_log/{sample}_{genome}_rawCounts_3dstarrCool.cooler"
    params: BIN500={BIN500}
    shell: """
cooler load -f bg2 --assembly hg38 --count-as-float --no-symmetric-upper {params.BIN500} {input} {output} 2> {log}
"""

rule make_weighted_lengthNorm_3dstarr_cool:
    input: "cool_3dstarr/final_{sample}_{genome}_weighted_500nt_LengthDepthNorm.bedpe"
    output: "cool_3dstarr/final_{sample}_{genome}_weighted_500nt_LengthDepthNorm.cool"
    message: "Make final 3dstarr cool file"
    log: "00_log/{sample}_{genome}_500nt_3dstarrCool.cooler"
    params: BIN500={BIN500}
    shell: """
cooler load -f bg2 --assembly hg38 --count-as-float --no-symmetric-upper {params.BIN500} {input} {output} 2> {log}
"""

rule make_unweighted_3dstarr_cool:
    input: "cool_3dstarr/final_{sample}_{genome}_unweighted_500nt_DepthNorm.bedpe"
    output: "cool_3dstarr/final_{sample}_{genome}_unweighted_500nt_DepthNorm.cool"
    message: "Make final 3dstarr cool file"
    log: "00_log/{sample}_{genome}_500nt_3dstarrCool.cooler"
    params: BIN500={BIN500}
    shell: """
cooler load -f bg2 --assembly hg38 --count-as-float --no-symmetric-upper {params.BIN500} {input} {output} 2> {log}
"""